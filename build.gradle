plugins {
    id "idea"
    id "org.scoverage" version "5.0.0" apply false
    id "com.google.protobuf" version "0.8.16" apply false
    id "com.github.maiflai.scalatest" version "0.31" apply false
    id "com.github.johnrengelman.shadow" version "7.0.0" apply false
}

subprojects {
    apply plugin: "idea"
    apply plugin: "scala"
    apply plugin: "java-library"
    apply plugin: "org.scoverage"
    apply plugin: "com.github.maiflai.scalatest"

    repositories {
        String mavenRepoMirror = project.hasProperty("mavenRepoMirror") ? "$mavenRepoMirror"
                : "https://maven.aliyun.com/repository/central"
        maven { url = mavenRepoMirror }
    }

    version = getProjectVersion()

    archivesBaseName = "${project.name}_${scala_binary_version}"

    configurations.all {
        resolutionStrategy {
            force "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
            force "com.fasterxml.jackson.core:jackson-core:$jackson_version"
            force "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
            force "com.fasterxml.jackson.module:jackson-module-paranamer:$jackson_version"
            force "com.fasterxml.jackson.module:jackson-module-scala_$scala_binary_version:$jackson_version"

            force "org.scala-lang.modules:scala-xml_$scala_binary_version:$scala_xml_version"
            force "org.scala-lang:scala-compiler:$scala_version"
            force "org.scala-lang:scala-library:$scala_version"
            force "org.scala-lang:scala-reflect:$scala_version"
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        withSourcesJar()
    }

    compileScala {
        options.fork = true
        options.forkOptions.jvmArgs += ["-Xss8M"]
    }

    test {
        maxParallelForks = 1
    }

    scoverage {
        reportDir.set(file("${rootProject.buildDir}/reports/scoverage"))
        highlighting.set(false)
        minimumRate.set(0.0)
    }
}

project(":clickhouse-spark-31-runtime") {
    apply plugin: "com.github.johnrengelman.shadow"

    tasks.jar.dependsOn tasks.shadowJar

    dependencies {
        compileOnly "org.scala-lang:scala-library:$scala_version"

        implementation(project(":clickhouse-spark-31")) {
            exclude group: "org.scala-lang", module: "scala-library"
            exclude group: "org.slf4j", module: "slf4j-api"
            exclude group: "org.apache.commons", module: "commons-lang3"
            exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
            exclude group: "com.fasterxml.jackson.module", module: "jackson-module-scala_$scala_binary_version"
        }
    }

    shadowJar {
        zip64 true
        classifier null

        relocate "org.antlr.v4.runtime", "xenon.relocated.org.antlr.v4.runtime"
        relocate "com.google", "xenon.relocated.com.google"
        relocate "io.grpc", "xenon.relocated.io.grpc"
        relocate "io.perfmark", "xenon.relocated.io.perfmark"
    }

    jar {
        enabled = false
    }
}

boolean isVersionFileExists() {
    return file("version.txt").exists()
}

String getVersionFromFile() {
    return file("version.txt").text.trim()
}

String getProjectVersion() {
    if (isVersionFileExists())
        return getVersionFromFile()

    String baseVersion = new Date().format("yyyy.MM.dd")
    return project.hasProperty("release") ? baseVersion : "$baseVersion-SNAPSHOT"
}

apply from: "deploy.gradle"
