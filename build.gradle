/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "org.scoverage" version "7.0.0" apply false
    id "com.google.protobuf" version "0.8.18" apply false
    id "org.nosphere.apache.rat" version "0.7.0"
    id "com.github.maiflai.scalatest" version "0.31" apply false
    id "com.github.johnrengelman.shadow" version "7.0.0" apply false
}

String mavenCentralMirror = project.hasProperty("mavenCentralMirror")
        ? "$mavenCentralMirror"
        : "https://mirrors.cloud.tencent.com/nexus/repository/maven-public/"

repositories {
    maven { url = mavenCentralMirror }
}

rat {
    verbose.set(true)
    exclude(
            "README.md",
            "CODE_OF_CONDUCT.md",
            "clickhouse-core/src/main/scala-2.12/scala/util/Using.scala",
            "**/.gitkeep",
            "site/**",
            ".python-version",
            // Gradle
            "gradle/wrapper/**",
            "gradlew*",
            "**/build/**",
            // IDEs
            "*.iml",
            "*.ipr",
            "*.iws",
            "*.idea/**",
            ".editorconfig"
    )
}

subprojects {
    apply plugin: "scala"
    apply plugin: "java-library"
    apply plugin: "org.scoverage"
    apply plugin: "com.github.maiflai.scalatest"

    repositories {
        maven { url = mavenCentralMirror }
    }

    version = getProjectVersion()

    archivesBaseName = "${project.name}_${scala_binary_version}"

    configurations.all {
        resolutionStrategy {
            force "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
            force "com.fasterxml.jackson.core:jackson-core:$jackson_version"
            force "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
            force "com.fasterxml.jackson.module:jackson-module-paranamer:$jackson_version"
            force "com.fasterxml.jackson.module:jackson-module-scala_$scala_binary_version:$jackson_version"

            force "org.scala-lang.modules:scala-xml_$scala_binary_version:$scala_xml_version"
            force "org.scala-lang:scala-compiler:$scala_version"
            force "org.scala-lang:scala-library:$scala_version"
            force "org.scala-lang:scala-reflect:$scala_version"
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        withSourcesJar()
    }

    compileScala {
        options.fork = true
        options.forkOptions.jvmArgs += ["-Xss8M"]
    }

    test {
        maxParallelForks = 1
    }

    scoverage {
        scoverageVersion = "1.4.11"
        reportDir.set(file("${rootProject.buildDir}/reports/scoverage"))
        highlighting.set(false)
        minimumRate.set(0.0)
    }
}

// it should execute before deploy.gradle
project(":clickhouse-core-runtime") {
    apply plugin: "com.github.johnrengelman.shadow"

    tasks.jar.dependsOn tasks.shadowJar

    dependencies {
        compileOnly "org.scala-lang:scala-library:$scala_version"

        implementation(project(":clickhouse-core")) {
            exclude group: "org.scala-lang", module: "scala-library"
            exclude group: "org.slf4j", module: "slf4j-api"
        }
    }

    shadowJar {
        zip64 true
        classifier null

        exclude "google/**/*.proto"
        exclude "META-INF/native/**"
        exclude "META-INF/native-image/**"

        relocate "org.antlr.v4.runtime", "xenon.relocated.org.antlr.v4.runtime"
        relocate "org.apache.commons", "xenon.relocated.org.apache.commons"
        relocate "com.fasterxml.jackson", "xenon.relocated.com.fasterxml.jackson"
        relocate "com.google", "xenon.relocated.com.google"
        relocate "com.thoughtworks.paranamer", "xenon.relocated.com.thoughtworks.paranamer"
        relocate "io.grpc", "xenon.relocated.io.grpc"
        relocate "io.perfmark", "xenon.relocated.io.perfmark"

        mergeServiceFiles()
    }

    jar {
        archiveClassifier.set('empty')
    }
}

// it should execute before deploy.gradle
project(":clickhouse-spark-32-runtime") {
    apply plugin: "com.github.johnrengelman.shadow"

    tasks.jar.dependsOn tasks.shadowJar

    dependencies {
        compileOnly "org.scala-lang:scala-library:$scala_version"

        implementation(project(":clickhouse-spark-32")) {
            exclude group: "org.antlr", module: "antlr4-runtime"
            exclude group: "org.scala-lang", module: "scala-library"
            exclude group: "org.slf4j", module: "slf4j-api"
            exclude group: "org.apache.commons", module: "commons-lang3"
            exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
            exclude group: "com.fasterxml.jackson.module", module: "jackson-module-scala_$scala_binary_version"
        }
    }

    shadowJar {
        zip64 true
        classifier null

        exclude "google/**/*.proto"
        exclude "META-INF/native/**"
        exclude "META-INF/native-image/**"

        relocate "com.google", "xenon.relocated.com.google"
        relocate "io.grpc", "xenon.relocated.io.grpc"
        relocate "io.perfmark", "xenon.relocated.io.perfmark"

        mergeServiceFiles()
    }

    jar {
        archiveClassifier.set('empty')
    }
}

boolean isVersionFileExists() {
    return file("version.txt").exists()
}

String getVersionFromFile() {
    return file("version.txt").text.trim()
}

String getProjectVersion() {
    if (isVersionFileExists())
        return getVersionFromFile()

    String baseVersion = new Date().format("yyyy.MM.dd")
    return project.hasProperty("release") ? baseVersion : "$baseVersion-SNAPSHOT"
}

apply from: "deploy.gradle"
